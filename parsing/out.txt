./utils/ft_strchr.c ./utils/ft_strstr.c ./utils/ft_split.c ./utils/ft_strdup.c ./utils/ft_atoi.c \
./utils/free_data.c ./utils/ft_substr.c ./utils/ft_strcmp.c \
	if (ft_strchr(map_represent[index_last], '\n'))
		length = ft_strlen(line) - 1;
	while (++j < ft_strlen(represent_map[0]) - 1)
	while (i < ft_strlen(color))
	rest = longest_length - strlen(line);
	length = ft_strlen(represent_map[0]);
		if (ft_strlen(represent_map[index]) > length)
			length = ft_strlen(represent_map[index]);
	while (i < ft_strlen(line) - 1)
	while (line[i] != '\0' && ft_strcmp(line, "\n"))
	while (ft_strcmp(line, first_line))
		if (ft_strcmp(line, "\n") && check_spaces(line))
typedef struct s_dd
typedef struct s_player
typedef struct s_texture
typedef struct s_floor
typedef struct s_ceiling
typedef struct s_data
typedef struct s_vars
char			*ft_strchr(char *s, int c);
const char		*ft_strstr(const char *haystack, const char *needle);
char			**ft_split(char *str, int del);
char			*ft_strdup(char *s1);
int				ft_atoi(const char *str);
char			*ft_substr(char *s, unsigned int start, size_t len);
int				ft_strcmp(const char *s1, const char *s2);
	data->map_represent[0] = ft_strdup(start_map);
		data->map_represent[i] = ft_strdup(line);
	while (line && !ft_strcmp(line, "\n"))
	char	*substr;
	substr = ft_substr(filename, 0, ft_strlen(filename) - 1);
	fd = open(substr, O_RDWR);
	free(substr);
	if (((ft_strcmp(strrchr(n, '.') + 1, "xpm")) - '\n') != 0 || \
	((ft_strcmp(strrchr(s, '.') + 1, "xpm")) - '\n') != 0 || \
	((ft_strcmp(strrchr(w, '.') + 1, "xpm")) - '\n') != 0 || \
	((ft_strcmp(strrchr(w, '.') + 1, "xpm")) - '\n') != 0)
	while (ft_strcmp(line, start_map))
	while (ft_strcmp(start, line))
	while (i < ft_strlen(line) - 1)
		data->floor.g = ft_strdup(spliting[1]);
		data->floor.b = ft_strdup(spliting[2]);
		data->ceiling.g = ft_strdup(spliting[1]);
		data->ceiling.b = ft_strdup(spliting[2]);
			data->floor.r = ft_strdup(dd[1]);
			data->ceiling.r = ft_strdup(dd[1]);
		data->texture.no = ft_strdup(spliting[1]);
		data->texture.so = ft_strdup(spliting[1]);
		data->texture.we = ft_strdup(spliting[1]);
		data->texture.ea = ft_strdup(spliting[1]);
